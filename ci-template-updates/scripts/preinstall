#!/bin/bash
################################################################################
################################################################################
##  usage: ${ROLE}.re-install         ## removes then re-installs     
##  usage: ${ROLE}.install            ## new install                  
##  usage: ${ROLE}.install.missing    ## install missing pkgs/configs 
##  usage: ${ROLE}.update             ## update everything            
##  usage: ${ROLE}.remove             ## remove packages              
##  usage: ${ROLE}.config             ## install just configs         
##  usage: ${ROLE}.apploadinstall     ## install missing packages     
##  usage: ${ROLE}.apploadupdate      ## update just packages         
################################################################################
################################################################################

##set -x
ARGS="${*}"
##echo "${ARGS}" >/tmp/ARGS
##exit

ROLE=`echo "${ARGS}"|awk -F\. {'print $1'}|grep -v "^[0-9]*_[0-9]*$"`
test "X${ROLE}" = "X" && exit 6
SUBROLEACTION=`echo "${ARGS}"|perl -p -e "s|\%.*$||g"|awk -F\. {'print $2'}|grep -v "^[0-9]*_[0-9]*$"|grep -v ".=."`
ACTIONATTR=`echo "${ARGS}"|perl -p -e "s|\%.*$||g"|awk -F\. {'print $3'}|grep -v "^[0-9]*_[0-9]*$"|grep -v ".=."`
PKGARGS=`echo "${ARGS}"|perl -p -e "s|\%.*$||g"|perl -p -e "s/\./\n/g"|grep ".=."`
export SCRIPTDIR=`dirname $0`
ROLEDIR=`dirname ${SCRIPTDIR}`
PATCHES=`cat ${SCRIPTDIR}/PATCHES 2>/dev/null`
PKGS=`cat ${SCRIPTDIR}/PKGS 2>/dev/null|perl -p -e "s/\n/,/g"`
RESPONCE=`echo "${PKGS}"|head -1|sed -e "s|,||g"`
##exit 1

/usr/sbin/slack-get global-slack
/usr/sbin/slack-get global-solaris-adminfunctions

. /etc/default/SYSconstants
export PATH="${SCRIPTDIR}:${PATH}"



####chmod 400 ${SCRIPTDIR}/%FETCHCRED%
####chown root:root ${SCRIPTDIR}/%FETCHCRED%
NAME="${ROLE}Tracker"
DESC="DO NOT REMOVE THIS TRACKER PKG.  Ran ${ROLE} role."
if [ "X${__OSNAME}" = "XSunOS" ] ; then
  test -d /var/sadm/pkg/TRK${NAME}
  TRACKER="$?"
  if [ "X${PKGARGS}" = "X" -a -d "${ROLEDIR}/files/%BASEDIR%" ] ; then
    PKGBASE=`pkgparam ${RESPONCE} BASEDIR 2>/dev/null`
    if [ "X${PKGBASE}" != "X" ] ; then
      PKGARGS="BASEDIR=${PKGBASE}"
    fi
  fi
else
  rpm -q TRK${NAME} >/dev/null
  TRACKER="$?"
fi


main()
{
case "${SUBROLEACTION}${ACTIONATTR}" in
  "")
    echo
    echo "##################################"
    echo "##  Insufficient arguments (0)  ##"
    echo "##################################"
    echo
    roleusage
    return 2
  ;;    

  installmissing)
    if [ "X${TRACKER}" = "X1" ] ; then
      mktracker || return 4
    fi
    mkusers
    appload
    rm_pkgs SUNWj3rt SUNWj5rt
    if [ "X${TRACKER}" = "X1" ] ; then
      apppatch
    fi
    return 0
  ;;

  install)
    if [ "X${TRACKER}" != "X1" ] ; then
      echo
      echo "#####################"
      echo "# ALREADY INSTALLED #"
      echo "#####################"
      echo
      roleusage
      return 1
    fi

    mktracker || return 4
    mkusers
    appload
    rm_pkgs SUNWj3rt SUNWj5rt
    apppatch
    return 0
  ;;

  re-install)
    echo
    echo "#################"
    echo "# RE-INSTALLING #"
    echo "#################"
    echo

    sleep 4
    appremove
    mktracker || return 4
    myfuncarg=`echo "${SUBROLEACTION}${ACTIONATTR}"|sed -e "s/^re-//g"`
    export SUBROLEACTION="${myfuncarg}"
    mkusers
    appload
    rm_pkgs SUNWj3rt SUNWj5rt
    apppatch

    echo
    echo "################"
    echo "# RE-INSTALLED #"
    echo "################"
    echo

    return 0
  ;;

  remove)
    appremove
    return 3
  ;;

  update|upgrade)
    mktracker || return 4
    mkusers
    appload
    rm_pkgs SUNWj3rt SUNWj5rt
    apppatch
    return 0
  ;;

  config)
    mkusers
    return 0
  ;;

  appload*)
    mktracker || return 5
    myfuncarg=`echo "${SUBROLEACTION}${ACTIONATTR}"|sed -e "s/^appload//g"`
    export SUBROLEACTION="${myfuncarg}"
    mkusers
    appload
    return 6
  ;;

  run|report|stig)
    mkusers
    sudoers.patch
    sysupdate.prepare
    rm -f /opt/unix_ops/STIG/bin/*
    return 0
  ;;

  *)
    ##set -x
    ##/bin/bash -i
    ERRMESG='
########################
##  INVALID ARGUMENT  ##
########################
'

    ISSHELL=`file -i ${SCRIPTDIR}/${SUBROLEACTION} 2>/dev/null|perl -p -e "s|^${SCRIPTDIR}/${SUBROLEACTION}:||g"|awk {'print $1'}|grep "shell"`
    ISFUNCTION=`set|grep "^\w* ()"|awk {'print $1'}|grep "^${SUBROLEACTION}$"`
    test "X${ISFUNCTION}" != "X" -o "X${ISSHELL}" = "X" && {
      eval "${SUBROLEACTION} ${ACTIONATTR}"
      STATUS="$?" 
      }

    test "X${ISSHELL}" != "X" && {
      . "${SCRIPTDIR}/${SUBROLEACTION}" "${ACTIONATTR}"
      STATUS="$?" 
      }

    if [ "X${STATUS}" != "X" -a "X${STATUS}" != "X0" -a "X${STATUS}" != "X10" ] ; then
      echo "${ERRMESG}"
      roleusage
      return 7
    fi
    ##/bin/bash -i
    test "X${STATUS}" = "X10" && return 0
    return 9
esac
}



appremove()
{
echo
echo "############"
echo "# REMOVING #"
echo "############"
echo "${PKGS}"
set -x
sleep 4
rm_pkgs ${PKGS}
set +x
echo "###########"
echo "# REMOVED #"
echo "###########"

}


cleanexit()
{
echo
echo cleanexit
if [ "X${ROLEDIR}" != "X" ] ; then
  ##set -x
  FILEPATHS=`ls -d ${ROLEDIR}/files ${ROLEDIR}/files.* ${ROLEDIR}/scripts 2>/dev/null`
  test "X${FILEPATHS}" != "X" && rm -rf ${FILEPATHS} 2>/dev/null
  test "X${FILEPATHS}" != "X" && mkdir -p ${FILEPATHS} 2>/dev/null
  ##set +x
else
  exit $1
fi
return 0
}


roleusage()
{
usagepull=`for i in \`ls -d ${SCRIPTDIR}/preinstall\` \`ls -d ${SCRIPTDIR}/*|grep -v "/PATCHES$"|grep -v "/preinstall$"|grep -v "/PKGS$"\` ; do sed '/^[\t,\ ]*$/,$d' ${i} |grep -v '^#\!'|perl -p -e "s|^[\t,\ ]*[\{,\}]{1}\s||g" ; done`

echo '################################################################################
################################################################################'
eval echo "\"${usagepull}\""|perl -p -e "s|^[#]{20,}\n||g"
echo '################################################################################
################################################################################'
}


main || cleanexit $?

